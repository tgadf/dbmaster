from dbmaster import MasterMetasdef test_metas():    mmetas = MasterMetas()        mediaTypes = mmetas.getMediaTypes()    assert isinstance(mediaTypes, dict), "mediaTypes [{mediaTypes}] is not a dict"    mediaTypesLong = mediaTypes.values()        mediaRanks = mmetas.getMediaRanks()    assert isinstance(mediaRanks, dict), "mediaRanks [{mediaRanks}] is not a dict"        primary = mediaRanks.get("Primary")    assert isinstance(primary, list), f"Primary rank data [{primary}] is not a list"    secondary = mediaRanks.get("Secondary")    assert isinstance(secondary, list), f"Secondary rank data [{secondary}] is not a list"    tertiary = mediaRanks.get("Tertiary")    assert isinstance(tertiary, list), f"Tertiary rank data [{tertiary}] is not a list"    for rank in [primary, secondary, tertiary]:        for mediaTypeLong in rank:            assert mediaTypeLong in mediaTypesLong, f"Invalid media type [{mediaTypeLong}]"            metaTypes = mmetas.getMetaTypes()    assert isinstance(metaTypes, dict), "metaTypes [{metaTypes}] is not a dict"    metaColumnNames = []    for metaType, metaColumns in metaTypes.items():        assert isinstance(metaColumns, list), f"metaType [{metaType}] column is not a list"        metaColumnNames += metaColumns        summaryTypes = mmetas.getSummaryTypes()    assert isinstance(summaryTypes, dict), "summaryTypes [{summaryTypes}] is not a dict"    summaryColumnNames = []    for summaryType, summaryColumns in summaryTypes.items():        assert isinstance(summaryColumns, list), f"summaryType [{summaryType}] column is not a list"        summaryColumnNames += summaryColumns    for summaryColumn in summaryColumnNames:        if summaryColumn not in ["Dates"]:            assert summaryColumn in metaColumnNames, f"Unknown summary column: {summaryColumn}"        matchTypes = mmetas.getMatchTypes()    assert isinstance(matchTypes, list), "matchTypes [{matchTypes}] is not a list"    for matchColumn in matchTypes:        if matchColumn not in ["Dates"]:            assert matchColumn in metaColumnNames, f"Unknown match column: {matchColumn}"