from dbmaster import MasterMatchfrom pandas import IntervalIndexdef test_match():    mmatch = MasterMatch()        nameInt = mmatch.nameInterval    assert isinstance(nameInt, IntervalIndex), f"nameInt [{nameInt}] is not a IntervalIndex"        mediaInt = mmatch.mediaInterval    assert isinstance(mediaInt, IntervalIndex), f"mediaInt [{mediaInt}] is not a IntervalIndex"        mediaScoreInt = mmatch.mediaScoreInterval    assert isinstance(mediaScoreInt, IntervalIndex), f"mediaScoreInt [{mediaScoreInt}] is not a IntervalIndex"        mediaRatioInt = mmatch.mediaMatchRatioInterval    assert isinstance(mediaRatioInt, IntervalIndex), f"mediaRatioInt [{mediaRatioInt}] is not a IntervalIndex"        cutoff = mmatch.cutoff    assert isinstance(cutoff, dict), f"cutoff [{cutoff}] is not a dict"    assert isinstance(cutoff.get('Name'), float), f"Name cutoff [{cutoff.get('Name')}] is not a float"    assert isinstance(cutoff.get('Media'), float), f"Media cutoff [{cutoff.get('Media')}] is not a float"    assert hasattr(mmatch, "scoreFunc"), "scoreFunc attr is not valid"    assert callable(getattr(mmatch, "scoreFunc")), "scoreFunc attr is not callable"        scoreFunc = getattr(mmatch, "scoreFunc")    for x in range(3):        assert isinstance(scoreFunc(x, scale=1, base=2), float), "Invalid score result"    for x in [None, 'x']:        assert isinstance(scoreFunc(x, scale=1, base=2), float), "Invalid score result"